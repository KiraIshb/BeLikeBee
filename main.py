import sqlite3
from telegram import Update
from telegram.ext import ApplicationBuilder, CommandHandler, ContextTypes
from telegram.constants import ParseMode

# –°–æ–∑–¥–∞–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –∏ —Ç–∞–±–ª–∏—Ü—É
def init_db():
    conn = sqlite3.connect('telegram_bot.db')
    cursor = conn.cursor()
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS tasks (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            user_id INTEGER NOT NULL,
            task NVARCHAR(25) NOT NULL
        )
    ''')
    conn.commit()
    conn.close()

init_db()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
def init_db():
    conn = sqlite3.connect('telegram_bot.db')
    cursor = conn.cursor()
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS tasks (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            user_id INTEGER NOT NULL,
            task TEXT NOT NULL
        )
    ''')
    conn.commit()
    conn.close()


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∏
def add_task(user_id: int, task: str):
    conn = sqlite3.connect('telegram_bot.db')
    cursor = conn.cursor()
    cursor.execute('INSERT INTO tasks (user_id, task) VALUES (?, ?)', (user_id, task))
    conn.commit()
    conn.close()


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∏
def delete_task(user_id: int, task_id: int):
    conn = sqlite3.connect('telegram_bot.db')
    cursor = conn.cursor()
    cursor.execute('DELETE FROM tasks WHERE id = ? AND user_id = ?', (task_id, user_id))
    conn.commit()
    conn.close()


#–§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ç–æ–≥–æ —á—Ç–æ–±—ã –æ—Ç–º–µ—Ç–∏—Ç—å –∑–∞–¥–∞—á—É –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–π
def complite_task(user_id: int, task_id: int):
    conn = sqlite3.connect('telegram_bot.db')
    cursor = conn.cursor()
    #task = cursor.execute('SELECT task FROM tasks WHERE user_id = ? AND id = ?', (user_id, task_id))
    cursor.execute("UPDATE tasks SET task = CONCAT('<s>', task, '</s>') WHERE id = ? AND user_id = ?", (task_id, user_id))
    conn.commit()
    conn.close()

#–§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ç–æ–≥–æ —á—Ç–æ–±—ã –æ—Ç–º–µ—Ç–∏—Ç—å –∑–∞–¥–∞—á—É –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–æ–π
def priority_task(user_id: int, task_id: int):
    conn = sqlite3.connect('telegram_bot.db')
    cursor = conn.cursor()
    #task = cursor.execute('SELECT task FROM tasks WHERE user_id = ? AND id = ?', (user_id, task_id))
    cursor.execute("UPDATE tasks SET task = CONCAT(task, '‚ùóÔ∏è') WHERE id = ? AND user_id = ?", (task_id, user_id))
    conn.commit()
    conn.close()

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤—Å–µ—Ö –∑–∞–¥–∞—á
def show_tasks(user_id: int) -> str:
    conn = sqlite3.connect('telegram_bot.db')
    cursor = conn.cursor()
    cursor.execute('SELECT id, task FROM tasks WHERE user_id = ?', (user_id,))
    tasks = cursor.fetchall()
    conn.close()
    if not tasks:
        return "–£ –≤–∞—Å –Ω–µ—Ç –∑–∞–¥–∞—á."

    response = "–ê –≤–æ—Ç –∏ —Å–ø–∏—Å–æ–∫ –¥–µ–ª:\n"
    for task in tasks:
        response += f"‚Ä¢ {task[1]} (id: {task[0]})\n"
    return response


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–ü—Ä–∏–≤–µ—Ç! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Ä—è–¥—ã –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –ø—á—ë–ª–æ–∫ üêù\n–î–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è –º–µ–Ω—é –∫–æ–º–∞–Ω–¥ –∂–º–∏ /command")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /command
async def command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–í–æ—Ç, —á—Ç–æ —è —É–º–µ—é:"+
                                    "\n/add &lt –∑–∞–¥–∞—á–∞ &gt - –¥–æ–±–∞–≤–∏—Ç –∑–∞–¥–∞—á—É –≤ —Å–ø–∏—Å–æ–∫ –¥–µ–ª"+
                                    "\n/delete &lt id &gt - —É–¥–∞–ª–∏—Ç –∑–∞–¥–∞—á—É –ø–æ —ç—Ç–æ–º—É id (–∫–∞–∂–¥–æ–π –∑–∞–¥–∞—á–µ –ø—Ä–∏—Å–≤–∞–∏–≤–∞–µ—Ç—Å—è —É–Ω–∏–∫–∞–ª—å–Ω—ã–π id, —É–∑–Ω–∞—Ç—å –µ–≥–æ –º–æ–∂–Ω–æ –∏–∑ —Å–ø–∏—Å–∫–∞ –¥–µ–ª)"+
                                    "\n/tasks - –≤—ã–≤–µ–¥–µ—Ç —Å–ø–∏—Å–æ–∫ –¥–µ–ª"+
                                    "\n/complite - –æ—Ç–º–µ—Ç–∏—Ç –∑–∞–¥–∞—á—É –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–π"+
                                    "\n/priority &lt id &gt - –¥–ª—è —Å–∞–º—ã—Ö –≤–∞–∂–Ω—ã—Ö –∑–∞–¥–∞—á"+
                                    "\n<em>–ü–ª–∞–Ω—ã - –Ω–∏—á—Ç–æ, –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ - –≤—Å—ë! *–±–∑–∑–∑*</em>", parse_mode='HTML')

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /add
async def add(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.from_user.id
    task = ' '.join(context.args)
    if task:
        add_task(user_id, task)
        await update.message.reply_text("<em>–û—Ç–ª–∏—á–Ω–æ!</em>"+
                                        f"\n–ó–∞–¥–∞—á–∞ {task} –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ —Å–ø–∏—Å–æ–∫ –¥–µ–ª üëç", parse_mode='HTML')
    else:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –∑–∞–¥–∞—á—É –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è.")


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /delete
async def delete(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.from_user.id
    if context.args:
        try:
            task_id = int(context.args[0])
            delete_task(user_id, task_id)
            await update.message.reply_text(f"<em>–ü—Ä–∞–≤–∏–ª—å–Ω—ã–º –ø—á—ë–ª–∞–º - –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –º—ë–¥!</em>\n–ó–∞–¥–∞—á–∞ {task_id} —É–¥–∞–ª–µ–Ω–∞ üóë", parse_mode='HTML')
        except ValueError:
            await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π ID –∑–∞–¥–∞—á–∏ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.")
    else:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ ID –∑–∞–¥–∞—á–∏ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /complite
async def complite(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.from_user.id
    if context.args:
        try:
            task_id = int(context.args[0])
            complite_task(user_id, task_id)
            await update.message.reply_text(f"<em>–£—Ä–∞!</em>\n–ó–∞–¥–∞—á–∞ {task_id} –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ ‚úÖ", parse_mode='HTML')
        except ValueError:
            await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π ID –∑–∞–¥–∞—á–∏ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è.")
    else:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ ID –∑–∞–¥–∞—á–∏ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è.")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /priority
async def priority(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.from_user.id
    if context.args:
        try:
            task_id = int(context.args[0])
            priority_task(user_id, task_id)
            await update.message.reply_text(f"<em>*–±–∑–∑–∑*</em>\n–ó–∞–¥–∞—á–∞ {task_id} –æ—Ç–º–µ—á–µ–Ω–∞ –≤–∞–∂–Ω–æ–π ‚òÄÔ∏è", parse_mode='HTML')
        except ValueError:
            await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π ID –∑–∞–¥–∞—á–∏ –¥–ª—è priority.")
    else:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ ID –∑–∞–¥–∞—á–∏ –¥–ª—è priority.")


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /tasks
async def tasks(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.from_user.id
    tasks_list = show_tasks(user_id)
    await update.message.reply_text(tasks_list, parse_mode="HTML")


# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞
if __name__ == '__main__':
    init_db()  # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    application = ApplicationBuilder().token('7831089520:AAHQZ5KvQYibTQMv7OUUAJwDe_Xmie3bHrw').build()

    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("command", command))
    application.add_handler(CommandHandler("add", add))
    application.add_handler(CommandHandler("delete", delete))
    application.add_handler(CommandHandler("complite", complite))
    application.add_handler(CommandHandler("priority", priority))
    application.add_handler(CommandHandler("tasks", tasks))

    application.run_polling()